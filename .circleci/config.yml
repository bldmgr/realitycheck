version: 2.1

# This is pipeline.parameters.value
parameters:
  username:
    type: string
    description: "Docker username"
    default: "${DOCKER_USERNAME}"
  password:
    type: string
    description: "Docker password"
    default: "${DOCKER_PASSWORD}"
  STAGING_PATH:
    type: string
    default: ~/project/staging
  BASE_PATH:
    type: string
    default: ~/project
  OUTPUT_PATH:
    type: string
    default: ~/project/install
  PROJECT_NAME:
    type: string
    default: cppzippackagetest
  PROJECT_VERSION:
    type: string
    default: "1.0.0"

executors:
  docker: # Docker using the Base Convenience Image
    parameters:
      resource_class:
        type: string
        default: "small"
    docker:
      - image: 'cimg/base:2021.02-20.04'
    resource_class: <<parameters.resource_class>>
  windows:  # Windows using the default windows image
    parameters:
      resource_class:
        type: string
        default: "medium"
    machine:
      image: windows-2022
      shell: 'powershell.exe -ExecutionPolicy Bypass'
    resource_class: <<parameters.resource_class>>
  linux:  # Linux using the default image
    parameters:
      resource_class:
        type: string
        default: "medium"
      image_type:
        type: string
        default: "default"
    machine:
      image: <<parameters.image_type>>
    resource_class: <<parameters.resource_class>>

  almalinux:  # Linux using the default image
    parameters:
      resource_class:
        type: string
        default: "medium"
      image_type:
        type: string
        default: "default"
    machine:
      image: <<parameters.image_type>>
    resource_class: <<parameters.resource_class>>

commands:
  # resource_class verification commands to execute depending on executor_type
  verify_resource_class:
    parameters:
      resource_class:
        type: string
        default: "small"
      executor_type:
        type: string
        default: "docker"
    steps:
      - when:
          condition:
            equal: [ "docker", << parameters.executor_type >> ]
          steps:
            - run:
                name: verify required Environment Variables
                command: |
                  if [ -z "${CIRCLE_HOSTNAME}" -o -z "${CIRCLE_TOKEN}" ];then
                    echo "You must provide 2 Environment Variables in project settings for this job to run."
                    echo "CIRCLE_HOSTNAME: Should be the scheme://domain of your install. \"https://ci.example.com\""
                    echo "CIRCLE_TOKEN: Should be the API Key of an admin or project level with Scope:All"
                    exit 1
                  fi
            - run:
                name: Verify that job ran with the requested resource_class option
                command: |
                  curl -k \
                  "${CIRCLE_HOSTNAME%/}/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
                  circle-token=$CIRCLE_TOKEN" | \
                  jq '.picard.resource_class.class' | grep <<parameters.resource_class>>
      - when:
          condition:
            equal: [ "windows", << parameters.executor_type >> ]
          steps:
            - run:
                name: verify required Environment Variables
                command: |
                  if (!((Test-Path env:CIRCLE_HOSTNAME) -and (Test-Path env:CIRCLE_TOKEN))) {
                    Write-Host "You must provide 2 Environment Variables in project settings for this job to run."
                    Write-Host "CIRCLE_HOSTNAME: Should be the scheme://domain of your install. "https://ci.example.com""
                    Write-Host "CIRCLE_TOKEN: Should be the API Key of an admin or project level with Scope:All"
                    Exit 1
                  }
            - run:
                name: Verify that job ran with the requested resource_class option
                command: |
                  $job = Invoke-RestMethod -URI "$env:CIRCLE_HOSTNAME/api/v2/project/gh/$env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME/job/$env:CIRCLE_BUILD_NUM" `
                    -Headers @{ "Circle-Token" = "$env:CIRCLE_TOKEN" }
                  $job.executor.resource_class | Select-String -Pattern "<<parameters.resource_class>>"
            - run: pwd
            - run: $Env:PATH -split ";"
            - run: $env:HOST_IP

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  default-tests:
    machine: 
      image: cisco-default-current
      docker_layer_caching: true
    resource_class: medium
    parallelism: 1
    environment:
      BROWSER: chrome
    steps:
      - checkout
      - run: 
          command: |
                   docker volume create --name=bootsnap_cache
                   docker volume create --name=vendor_bundle
                   docker compose -f docker-compose.yml pull
                   docker compose up -d
  default-buildx:
    machine: 
      image: cisco-default-current
      docker_layer_caching: true
    resource_class: medium
    parallelism: 1
    environment:
      BROWSER: chrome
    steps:
      - checkout
      - run: 
          command: |
                   docker login --username <<pipeline.parameters.username>> --password <<pipeline.parameters.password>>
                   docker buildx create --name mybuilder --use --bootstrap
                   docker buildx ls
                   docker buildx build --push \
                   --platform linux/amd64,linux/arm64 \
                   --tag <<pipeline.parameters.username>>/multi_arch_sample:buildx-latest .
   
  nomad-packer-build:
    docker:
      - image: hashicorp/packer:1.9
    steps:
      - checkout
      - run: apk update
      - run: apk add --no-progress python3 curl jq py3-pip
      - run: pip3 install awscli pyyaml
      - run:
          name: convert ubuntu-22.04/packer.yaml to ubuntu-22.04/packer.json
          command: |
            cat ./ubuntu-22.04/packer.yaml \
              | python3 -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y))' \
              > ./ubuntu-22.04/packer.json
      - run:
          command: |
                   mkdir -p /tmp/results /tmp/artifacts
                   cat ./ubuntu-22.04/packer.json | jq 
                   cp ./ubuntu-22.04/packer.json /tmp/artifacts
      - run:
          name: Build images
          no_output_timeout: 120m
          environment:
            # The AMI can take a very long time to be ready. These env
            # vars make packer wait 2 hours for this to happen before
            # giving up.
            AWS_MAX_ATTEMPTS: 120
            AWS_POLL_DELAY_SECONDS: 60
          command: |
            MONOREPO_CONTENT_SHA="$(./scripts/get_content_sha ubuntu-22.04)"
            
            ./scripts/get_last_image "${PROVIDER}" "${MONOREPO_CONTENT_SHA}" "${CIRCLE_JOB}" && {
                echo "${PROVIDER} image with monorepo_content_sha = ${MONOREPO_CONTENT_SHA} and circle_job_name = ${CIRCLE_JOB} already exists. Skipping build"
              } || packer build \
              -machine-readable \
              --var monorepo_content_sha="${MONOREPO_CONTENT_SHA}" \
              --var image_family_suffix="${IMAGE_FAMILY_SUFFIX}" \
              --var ami_region="${AWS_DEFAULT_REGION}" \
              --var test_results_path="/tmp/results/test-results.xml" \
              ${SOURCE_IMAGE_VAR} \
              ubuntu-22.04/packer.json | tee /tmp/artifacts/image-build.log

  env-subst-example:
    executor: docker
    environment:
      foo: bar
      alpha: beta
    steps:
      - checkout
      - run:
          command: echo 'the value of foo is "$foo" and next to alpha is "$alpha"' > template.tmpl
      - run:
          command: cat template.tmpl
      - run:
          command: circleci env subst < template.tmpl > output.txt
      - run:
          command: grep "bar" output.txt | grep "beta"

  # job definition for verifying the resource_class per each executor_type
  executor_resource_class:
    parameters:
      resource_class:
        type: string
        default: "small"
      executor_type:
        type: string
        default: "docker"
    executor:
      name: <<parameters.executor_type>>
      resource_class: <<parameters.resource_class>>
    steps:
      - verify_resource_class:
          resource_class: <<parameters.resource_class>>
          executor_type: <<parameters.executor_type>>

  linux_executor_resource_class:
    parameters:
      resource_class:
        type: string
        default: "medium"
      executor_type:
        type: string
        default: "linux"
      image_type:
        type: string
        default: "default"
    executor:
      name: <<parameters.executor_type>>      
      resource_class: <<parameters.resource_class>>
      image_type: <<parameters.image_type>>
    steps:
      - checkout
      - run:
          name: Verify Firefox Installed
          command: |
                   firefox --version && echo "OK" || echo "NOK"
      - run:
          name: Verify Developer Tools Installed
          command: |
                   jq --version
                   ant -diagnostics
                   gradle --version
                   socat -V
      - run:
          name: Verify AWS CLI Installed
          command: |
                   aws --version && echo "OK" || echo "NOK"
      - run:
          name: Verify Chrome and Driver Installed
          command: |
                   google-chrome --version && echo "OK" || echo "NOK"
                   chromedriver --version && echo "OK" || echo "NOK"
      - run:
          name: Verify Docker Installed
          command: |
                   docker --version
                   docker buildx version
                   docker compose version && echo "OK" || echo "NOK"
                   docker-compose version && echo "OK" || echo "NOK"
      - run:
          name: Verify GoLang Installed
          command: |
                   go version
      - run:
          name: Verify Python Installed
          command: |
                   python3 --version
                   if [[ $CIRCLE_STAGE = *'cisco'* ]]; then
                     python3.11 --version && echo "OK" || echo "NOK"
                     python3.12 --version && echo "OK" || echo "NOK"
                     python2 --version && echo "OK" || echo "NOK"
                   fi
      - run:
          name: Verify Cmake Installed
          command: |
                   cmake --version
      - run:
          name: Verify Ruby Installed
          command: |
                   ruby --version
      - run:
          name: Verify Java Installed
          command: |
                   java -version
                   if [[ $CIRCLE_STAGE = *'cisco'* ]]; then
                     sudo update-alternatives --set  "java" "/usr/lib/jvm/java-18-openjdk-amd64/bin/java" && echo "OK" || echo "NOK"
                     java -version && echo "OK" || echo "NOK"
                     sudo update-alternatives --set  "java" "/usr/lib/jvm/java-19-openjdk-amd64/bin/java" && echo "OK" || echo "NOK"
                     java -version && echo "OK" || echo "NOK"                     
                   fi


  check_if_environment_is_aws:
    executor: docker
    steps:
      - run:
          name: Verify AWS Environment
          command: |
            if [ -z "${CIRCLE_CLOUD_PROVIDER}" ];then
              echo "You must provide the CIRCLE_CLOUD_PROVIDER environment variable in project settings for this job to run.";
              exit 1;
            fi
            if [[ "${CIRCLE_CLOUD_PROVIDER}" != 'aws' ]]; then
              echo "This installation is not in an AWS environment. Cancelling downstream workflow.";
              curl -X POST "${CIRCLE_HOSTNAME%/}/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_TOKEN"
            fi

  check_if_environment_is_gcp:
    executor: docker
    steps:
      - run:
          name: Verify GCP Environment
          command: |
            if [ -z "${CIRCLE_CLOUD_PROVIDER}" ];then
              echo "You must provide the CIRCLE_CLOUD_PROVIDER environment variable in project settings for this job to run.";
              exit 1;
            fi
            if [[ "${CIRCLE_CLOUD_PROVIDER}" != 'gcp' ]]; then
              echo "This installation is not in an GCP environment. Cancelling downstream workflow.";
              curl -X POST "${CIRCLE_HOSTNAME%/}/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_TOKEN"
            fi

  check_if_windows_is_enabled:
    executor: docker
    steps:
      - run:
          name: Verify if Windows enabled env flag is set to true
          command: |
            if [[ "${CIRCLE_WINDOWS_EXECUTOR}" != "true" ]]; then
              echo "Windows executor environment flag is not set to \"true\". Cancelling downstream workflow."
              curl -X POST "${CIRCLE_HOSTNAME%/}/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_TOKEN"
            fi

  # vm jobs
  runner:
    machine: true
    resource_class: bldmgr/lab
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          circleci version
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  machine:
    machine: true
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          circleci version
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1
  
  android_machine:
    machine:
      image: android-default
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          circleci version
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  aws_arm:
    machine:
      image: arm-default
    resource_class: arm.medium
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          circleci version
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: circleci version
      - run: which docker
      - run: docker -v
      - setup_remote_docker
      - run:
          <<: *basic_docker_build
      - run: docker version

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: circleci version
      - run: which docker
      - run: docker -v
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *basic_docker_build
      - run: docker version

  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: circleci version
      - run: which docker
      - run: docker -v
      - run:
          <<: *basic_docker_build
      - run: docker version

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run: mkdir -p stuff
      - run: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run: rm -rf ./stuff/thing
      - run: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

  simple-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - run: echo "hello"
      #- run: curl http://169.254.169.254/latest/meta-data/ami-id --net=host
      
  build-image-no-cache:
    machine: true
    steps:
      - checkout
      - run: docker build . -t dev-image
      
  build-no-cache-buildkit:
    machine: true
    environment:
      DOCKER_BUILDKIT: '1'
    steps:
      - checkout
      - run: df -h
      - run: docker build . -t dev-image 
      - run: df -h
  
  build-dlc-buildkit:
    machine:
      image: default
      docker_layer_caching: true
    environment: 
      DOCKER_BULDKIT: '1'
    steps:
      - checkout
      - run: df -h
      - run: docker build . -t dev-image --cache-from=dev-image --build-arg BUILDKIT_INLINE_CACHE=1
      - run: df -h

  compose-pull:
    machine:
      image: default
      docker_layer_caching: true
    environment: 
      CACHE_IMAGE: mjhea0/docker-ci-cache
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - checkout
      - run:
          name: Build Docker images
          command: docker-compose -f docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1

  win-test-01:
    machine: true
    resource_class: bldmgr/windows
    shell: powershell.exe
    steps:
      - run: pwd
      - run: $Env:PATH -split ";"
      - run: $env:HOST_IP

  win-test-02:
    machine: true
    resource_class: bldmgr/windows
    shell: powershell.exe
    steps:
      - checkout
      - run: pwd
      - run: $Env:PATH -split ";"
      - run: $env:HOST_IP
      - run:
          name: "List .Net runtimes"
          command: dotnet --list-runtimes
      - run: |
             mkdir -p ./install
             mkdir -p ./staging/Debug
             mkdir -p ./staging/Release
             echo "1234" > ./staging/Release/file1.txt
             echo "1234" > ./staging/Debug/file2.txt
             echo "1234" > ./staging/file3.txt
      - run: | 
             GITSHA_SHORT=$(echo $CIRCLE_SHA1 | cut -c -7)
             tar -czf ${GITSHA_SHORT}.tar.gz -C ./staging


  mac-test-01:
    machine: true
    resource_class: bldmgr/personal
    steps:
      - checkout
      - run: ls -la

  mac-test-02:
    machine: true
    resource_class: bldmgr/personal
    steps:
      - checkout
      - run: ls -la

  mac-test-03:
    machine: true
    resource_class: bldmgr/personal
    steps:
      - checkout
      - run: ls -la

  mac-test-04:
    machine: true
    resource_class: bldmgr/personal
    steps:
      - checkout
      - run: ls -la


  ssh-test:
    machine: 
      image: default
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fa:44:94:03:b4:3e:33:6b:23:d8:d1:40:40:3f:6e:53"
      - run: git clone git@github.com:bldmgr/bogus.git
      - run: git clone git@github.com:bldmgr/tagbot.git
      - run: git clone git@github.com:apollo-command-and-service-module/apollo.git
      - run: ls -la
      - run: sudo -v

workflows:
#  windows:
#    jobs:
#      - win-test-01
#      - win-test-02

#  mac:
#    jobs:
#      - mac-test-01
#      - mac-test-02
#      - mac-test-03
#      - mac-test-04
  dlc_testing:
    jobs:
      - simple-docker
      - build-image-no-cache
      - build-no-cache-buildkit
      - build-dlc-buildkit
      - compose-pull

  docker_resource_class_jobs:
    jobs:
      - executor_resource_class:
          matrix:
            parameters:
              resource_class: [small, medium, medium+, large, xlarge]
              executor_type: [docker] # default, but re-defining for clarity

  windows_default_resource_class:
    jobs:
      - check_if_windows_is_enabled
      - executor_resource_class:
          matrix:
            parameters:
              resource_class: [windows.medium, windows.large, windows.xlarge]
              executor_type: [windows]
          requires:
            - check_if_windows_is_enabled
 
#  almalinux_resource_class_jobs:
#    jobs:
#      - linux_executor_resource_class:
#          matrix:
#            parameters:
#              resource_class: [general.small, general.medium, general.large]
#              image_type: [alma9]
#              executor_type: [almalinux] # default, but re-defining for clarity

#  linux_resource_class_jobs:
#    jobs:
#      - linux_executor_resource_class:
#          matrix:
#            parameters:
#              resource_class: [memory.small, memory.medium, memory.large, memory.xlarge, compute.small, compute.medium, compute.large, compute.xlarge, compute.2xlarge, general.small, general.medium, general.large, general.xlarge, general.2xlarge, network.small, network.medium, network.xlarge, network.2xlarge, accelerated.small]
#              image_type: [default, cisco-default-current]
#              executor_type: [linux] # default, but re-defining for clarity
#  
#  linux_images_jobs:
#    jobs:
#      - linux_executor_resource_class:
#          matrix:
#            parameters:
#              resource_class: [medium]
#              image_type: [default, cisco-default-original, default-original, default-current, cisco-default-current, cisco-build-dev, ubuntu-latest]
#              executor_type: [linux] # default, but re-defining for clarity
#  vm_jobs:
#    jobs:
#      - machine
#      - remote_docker
#      - docker_layer_caching
#      - machine_dlc
#      - runner
#  
#  aws_jobs:
#    jobs:
#      - check_if_environment_is_aws
#      - aws_arm:
#          requires:
#            - check_if_environment_is_aws
#  
##  gcp_jobs:
##    jobs:
##      - check_if_environment_is_gcp
##      - android_machine:
##          requires:
##            - check_if_environment_is_gcp
##
  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results

  other_jobs:
    jobs:   
      - env-subst-example
      - nomad-packer-build
      - default-tests
      - default-buildx
      - ssh-test
